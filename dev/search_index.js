var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = georectification","category":"page"},{"location":"#georectification","page":"Home","title":"georectification","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for georectification.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [georectification]","category":"page"},{"location":"#georectification.Coords!-Tuple{DataFrames.DataFrame, String, Float64, Float64, Bool}","page":"Home","title":"georectification.Coords!","text":"Coords!(df::DataFrame,\n        lcf_path::String,\n        z_ground::Float64,\n        θ::Float64,\n        flipped::Bool)\n\nCompute the ground coordinates for each pixel of an HSI df. Update the original df to include\n\nlatitude\nlongitude\naltitude\npixeltimes\nroll\npitch\nheading\n\n\n\n\n\n","category":"method"},{"location":"#georectification.Rotate-Tuple{Any, Any, Any}","page":"Home","title":"georectification.Rotate","text":"Rotate(heading, pitch, roll)\n\nReturn a rotation matrix corresponding to the given orientation angles.\n\n\n\n\n\n","category":"method"},{"location":"#georectification.generateDerivedMetrics!-Tuple{DataFrames.DataFrame, Array{Float64}}","page":"Home","title":"georectification.generateDerivedMetrics!","text":"generateDerivedMetrics!(df::DataFrame, λs::Array{Float64})\n\nGiven a dataframe df with HSI data, compute a variety of derived wavelength indices such as the NDVI.\n\n\n\n\n\n","category":"method"},{"location":"#georectification.generateReflectance!-Tuple{DataFrames.DataFrame, String, String, String, Vector{Float64}}","page":"Home","title":"georectification.generateReflectance!","text":"generateReflectance!(df::DataFrame, specPath::String, specHdrPath::String, calibrationPath::String, wavelengths::Array{Float64, 1})\n\nGiven a dataframe df containing the radiance data, generate reflectance data using collected irradiance spectrum and Resonon-supplied calibration data.\n\nNOTE\n\nThe conversion assumes a Lambertian surface. This is clearly not the case for water that isn't perfectly still.\n\n\n\n\n\n","category":"method"},{"location":"#georectification.georectify-Tuple{String, String, String, String, String, String, String, Array{Float64}, Float64, Float64, Bool, Int64}","page":"Home","title":"georectification.georectify","text":"georectify(bilpath::String,\n           bilhdrpath::String,\n           timespath::String,\n           specpath::String,\n           spechdrpath::String,\n           calibrationpath::String,\n           lcfpath::String,\n           λs::Array{Float64},\n           z_ground::Float64,\n           θ_view::Float64,\n           isFlipped::Bool,\n           ndigits::Int,\n           )\n\nGenerate a georectified dataframe including radiance, reflectance, derived metrics, and position data. \n\n\n\n\n\n","category":"method"},{"location":"#georectification.getHSIFlightData-Tuple{DataFrames.DataFrame, String}","page":"Home","title":"georectification.getHSIFlightData","text":"getHSIFlightData(df::DataFrame, lcf_path::String)\n\nGiven IMU data found at lcf_path, compute the position and orientation of the Aerial Vehicle at time of capture for each pixel.\n\n\n\n\n\n","category":"method"},{"location":"#georectification.getHdrFile-Tuple{String}","page":"Home","title":"georectification.getHdrFile","text":"getHdrFile(pathToHdrFile::String)\n\nRead an ENVI-style header file and return a dictionary with image metadata.\n\n\n\n\n\n","category":"method"},{"location":"#georectification.getIMUdata-Tuple{String}","page":"Home","title":"georectification.getIMUdata","text":"getIMUdata(pathToLCF::String)\n\nRead a .lcf file and return a DataFrame df with corresponding IMU data and the value start_time indicating the start time of the clock in linux epoch time.\n\nData Returned\n\ntime: system time in seconds starting at zero\nroll: angle in radians.\npitch: angle in radians.\nheading: aka yaw. angle in radians.\nlongitude: GPS longitude in degrees, negative for west longitudes\nlatitude: GPS latitude in degrees\naltitude: height in meters above the WGS-54 ellipsoid\nx: x coordinate in meters in UTMz coordinate system\ny: y coordinate in meters in UTMz coordinate system\nz: z coordinate in meters in UTMz coordinate system\nzone: the UTM zone for the local coordinate system\nisnorth: boolean for whether or not position is above equator\n\nNOTES\n\nThe conversion between GPS time and Unix Epoch time was a little confusing. It is good to double check that this is correct (how should we deal with leap seconds?). This is relevant for parsing data from the FLIR as well.\n\n\n\n\n\n","category":"method"},{"location":"#georectification.getTimes-Tuple{String}","page":"Home","title":"georectification.getTimes","text":"getTimes(pathToTimes::String)\n\nRead a .times and return values starting at t=0. Times are assumed to be aligned with the corresponding .lcf file.\n\n\n\n\n\n","category":"method"},{"location":"#georectification.ilat_ilon!-Tuple{DataFrames.DataFrame, Any}","page":"Home","title":"georectification.ilat_ilon!","text":"ilat_ilon!(df::DataFrame, ndigits)\n\nUpdate a dataframe to include the rounded coordinates ilat and ilon with ndigits of precision.\n\n\n\n\n\n","category":"method"},{"location":"#georectification.ilat_ilon!-Tuple{DataFrames.DataFrame}","page":"Home","title":"georectification.ilat_ilon!","text":"ilat_ilon!(df::DataFrame)\n\nDispatch of ilat_ilon() to use default value of 6 for ndigits.\n\n\n\n\n\n","category":"method"},{"location":"#georectification.imagecoords-NTuple{4, Any}","page":"Home","title":"georectification.imagecoords","text":"imagecoords(i, j, N, f)\n\nGiven pixel indices i and j, compute the coordinates of a HSI pixel in the image coordinate system. The height is the focal length f, and the pixels are assumed to lie along the y-axis.\n\n\n\n\n\n","category":"method"},{"location":"#georectification.imagecoordsFlipped-NTuple{4, Any}","page":"Home","title":"georectification.imagecoordsFlipped","text":"imagecoordsFlipped(i, j, N, f)\n\nSame as imagecoord() but with the y axis flipped. This is useful in case the camera settings for direction of flight are backwards.\n\n\n\n\n\n","category":"method"},{"location":"#georectification.masterLCF-Tuple{String}","page":"Home","title":"georectification.masterLCF","text":"masterLCF(folder::String)\n\nLoop through all .lcf files in folder and return a DataFrame containing the start and end times for each datacube aquisition.\n\nFields\n\npaths: Paths to each HSI directory\nfiles: file name for .lcf files\ntstart: starting time for each datacube acquisition\ntend: ending time for each datacube acquisition\n\n\n\n\n\n","category":"method"},{"location":"#georectification.readToDataFrame","page":"Home","title":"georectification.readToDataFrame","text":"readToDataFrame(pathToBinaryFile::String, pathToHdrFile::String, pathToTimesFile::String)\n\nRead ENVI file with corresponding header (.hdr) and times (.times) file and return a DataFrame containing the image data flattened to (nbands, ncols*nrows).\n\n\n\n\n\n","category":"function"}]
}
